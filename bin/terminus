#!/usr/bin/env php
<?php

// If we're running from phar load the phar autoload file.
use Robo\Robo;

$pharPath = \Phar::running(true);
if ($pharPath) {
    $autoloaderPath = "$pharPath/vendor/autoload.php";
}
if (!isset($autoloaderPath)) {
    if (file_exists(dirname(__DIR__) . '/vendor/autoload.php')) {
        $autoloaderPath = dirname(__DIR__) . '/vendor/autoload.php';
    }
    if (file_exists(dirname(__DIR__) . '/../../autoload.php')) {
        $autoloaderPath = dirname(__DIR__) . '/../../autoload.php';
    }
}
if (!isset($autoloaderPath)) {
    die("Could not find autoloader. Run 'composer install'.");
}
$classLoader = require $autoloaderPath;

$composerFileContents = json_decode(
    file_get_contents(
        \Composer\Factory::getComposerFile()
    ),
    true,
    512,
    JSON_THROW_ON_ERROR);
// Customization variables
$argv = $_SERVER['argv'];
$appName = "Terminus";
$appVersion = $composerFileContents['extra']['version'] ?? "3.0.0";
if (file_exists(dirname(__DIR__) . '/VERSION')) {
    $appVersion = trim(file_get_contents(dirname(__DIR__) . '/VERSION'));
}
$discovery = new \Consolidation\AnnotatedCommand\CommandFileDiscovery();
$discovery->setSearchPattern('*Command.php');
$commandClasses = $discovery->discover('src/Commands', '\Pantheon\Terminus\API\Commands');
$selfUpdateRepository = 'stovak/terminus-api';
$configPrefix = 'TERMINUS';
$configFilePath = dirname(__DIR__) . "/config/constants.yml";

// Define our Runner, and pass it the command classes we provide.
$app = Robo::createDefaultApplication($appName, $appVersion);
$runner = new \Robo\Runner();
$runner
    ->setSelfUpdateRepository($selfUpdateRepository)
    ->setConfigurationFilename($configFilePath)
    ->setEnvConfigPrefix($configPrefix)
    ->setClassLoader($classLoader);
// Execute the command and return the result.
$output = new \Symfony\Component\Console\Output\ConsoleOutput();
$statusCode = $runner->run(
    $argv,
    $output,
    $app,
    $commandClasses
);

exit($statusCode);
